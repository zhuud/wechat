// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.1

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tbUserServiceQrcodeConclusionsFieldNames          = builder.RawFieldNames(&TbUserServiceQrcodeConclusions{})
	tbUserServiceQrcodeConclusionsRows                = strings.Join(tbUserServiceQrcodeConclusionsFieldNames, ",")
	tbUserServiceQrcodeConclusionsRowsExpectAutoSet   = strings.Join(stringx.Remove(tbUserServiceQrcodeConclusionsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	tbUserServiceQrcodeConclusionsRowsWithPlaceHolder = strings.Join(stringx.Remove(tbUserServiceQrcodeConclusionsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheTbUserServiceQrcodeConclusionsIdPrefix = "cache:tbUserServiceQrcodeConclusions:id:"
)

type (
	tbUserServiceQrcodeConclusionsModel interface {
		Insert(ctx context.Context, data *TbUserServiceQrcodeConclusions) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*TbUserServiceQrcodeConclusions, error)
		Update(ctx context.Context, data *TbUserServiceQrcodeConclusions) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultTbUserServiceQrcodeConclusionsModel struct {
		sqlc.CachedConn
		table string
	}

	TbUserServiceQrcodeConclusions struct {
		Id                  uint64    `db:"id"`                      // 主键id
		UserServiceQcCodeId int64     `db:"user_service_qc_code_id"` // 企业微信客服二维码信息表主键ID
		Type                string    `db:"type"`                    // 结束语类型：text-文本；image-图片；link-图文；miniprogram-小程序
		Content             string    `db:"content"`                 // 结束语内容，json字符串
		Status              uint64    `db:"status"`                  // 状态 (0:删除,1:正常)
		CreatedAt           time.Time `db:"created_at"`              // 创建时间
		UpdatedAt           time.Time `db:"updated_at"`              // 更新时间
	}
)

func newTbUserServiceQrcodeConclusionsModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultTbUserServiceQrcodeConclusionsModel {
	return &defaultTbUserServiceQrcodeConclusionsModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`tb_user_service_qrcode_conclusions`",
	}
}

func (m *defaultTbUserServiceQrcodeConclusionsModel) Delete(ctx context.Context, id uint64) error {
	tbUserServiceQrcodeConclusionsIdKey := fmt.Sprintf("%s%v", cacheTbUserServiceQrcodeConclusionsIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, tbUserServiceQrcodeConclusionsIdKey)
	return err
}

func (m *defaultTbUserServiceQrcodeConclusionsModel) FindOne(ctx context.Context, id uint64) (*TbUserServiceQrcodeConclusions, error) {
	tbUserServiceQrcodeConclusionsIdKey := fmt.Sprintf("%s%v", cacheTbUserServiceQrcodeConclusionsIdPrefix, id)
	var resp TbUserServiceQrcodeConclusions
	err := m.QueryRowCtx(ctx, &resp, tbUserServiceQrcodeConclusionsIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tbUserServiceQrcodeConclusionsRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTbUserServiceQrcodeConclusionsModel) Insert(ctx context.Context, data *TbUserServiceQrcodeConclusions) (sql.Result, error) {
	tbUserServiceQrcodeConclusionsIdKey := fmt.Sprintf("%s%v", cacheTbUserServiceQrcodeConclusionsIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, tbUserServiceQrcodeConclusionsRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.UserServiceQcCodeId, data.Type, data.Content, data.Status)
	}, tbUserServiceQrcodeConclusionsIdKey)
	return ret, err
}

func (m *defaultTbUserServiceQrcodeConclusionsModel) Update(ctx context.Context, data *TbUserServiceQrcodeConclusions) error {
	tbUserServiceQrcodeConclusionsIdKey := fmt.Sprintf("%s%v", cacheTbUserServiceQrcodeConclusionsIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, tbUserServiceQrcodeConclusionsRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.UserServiceQcCodeId, data.Type, data.Content, data.Status, data.Id)
	}, tbUserServiceQrcodeConclusionsIdKey)
	return err
}

func (m *defaultTbUserServiceQrcodeConclusionsModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheTbUserServiceQrcodeConclusionsIdPrefix, primary)
}

func (m *defaultTbUserServiceQrcodeConclusionsModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tbUserServiceQrcodeConclusionsRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultTbUserServiceQrcodeConclusionsModel) tableName() string {
	return m.table
}
