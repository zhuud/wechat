// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userServiceQrcodeFieldNames          = builder.RawFieldNames(&UserServiceQrcode{})
	userServiceQrcodeRows                = strings.Join(userServiceQrcodeFieldNames, ",")
	userServiceQrcodeRowsExpectAutoSet   = strings.Join(stringx.Remove(userServiceQrcodeFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	userServiceQrcodeRowsWithPlaceHolder = strings.Join(stringx.Remove(userServiceQrcodeFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	userServiceQrcodeModel interface {
		Insert(ctx context.Context, data *UserServiceQrcode) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*UserServiceQrcode, error)
		Update(ctx context.Context, data *UserServiceQrcode) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultUserServiceQrcodeModel struct {
		conn  sqlx.SqlConn
		table string
	}

	UserServiceQrcode struct {
		Id            uint64    `db:"id"`              // 主键id
		ConfigId      string    `db:"config_id"`       // 新增联系方式的配置id
		Type          int64     `db:"type"`            // 联系方式类型，1-单人，2-多人
		Scene         int64     `db:"scene"`           // 场景，1-在小程序中联系，2-通过二维码联系
		Style         int64     `db:"style"`           // 小程序中联系按钮的样式，仅在scene为1时返回，详见附录
		Remark        string    `db:"remark"`          // 联系方式的备注信息，用于助记
		SkipVerify    bool      `db:"skip_verify"`     // 外部客户添加时是否无需验证
		State         string    `db:"state"`           // 企业自定义的state参数，用于区分不同的添加渠道
		QrCode        string    `db:"qr_code"`         // 联系二维码的URL，仅在scene为2时返回
		User          string    `db:"user"`            // 使用该联系方式的用户userID列表
		Party         string    `db:"party"`           // 使用该联系方式的部门id列表
		IsTemp        int64     `db:"is_temp"`         // 是否临时会话模式0 不是 1 是
		ExpiresIn     int64     `db:"expires_in"`      // 临时会话二维码有效期，以秒为单位
		ChatExpiresIn int64     `db:"chat_expires_in"` // 临时会话有效期，以秒为单位
		Unionid       string    `db:"unionid"`         // 可进行临时会话的客户unionid
		IsExclusive        int64     `db:"is_exclusive"`         // 0-否 1-是；是否开启同一外部企业客户只能添加同一个员工
		Status        uint64    `db:"status"`          // 状态 (0:删除,1:正常) | 2020-09-10
		CreatedAt     time.Time `db:"created_at"`      // 创建时间 | 2020-09-10
		UpdatedAt     time.Time `db:"updated_at"`      // 更新时间 | 2020-09-10
	}
)

func newUserServiceQrcodeModel(conn sqlx.SqlConn) *defaultUserServiceQrcodeModel {
	return &defaultUserServiceQrcodeModel{
		conn:  conn,
		table: "`user_service_qrcode`",
	}
}

func (m *defaultUserServiceQrcodeModel) Delete(ctx context.Context, id uint64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultUserServiceQrcodeModel) FindOne(ctx context.Context, id uint64) (*UserServiceQrcode, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userServiceQrcodeRows, m.table)
	var resp UserServiceQrcode
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserServiceQrcodeModel) Insert(ctx context.Context, data *UserServiceQrcode) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, userServiceQrcodeRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.ConfigId, data.Type, data.Scene, data.Style, data.Remark, data.SkipVerify, data.State, data.QrCode, data.User, data.Party, data.IsTemp, data.ExpiresIn, data.ChatExpiresIn, data.Unionid, data.Status)
	return ret, err
}

func (m *defaultUserServiceQrcodeModel) Update(ctx context.Context, data *UserServiceQrcode) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userServiceQrcodeRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.ConfigId, data.Type, data.Scene, data.Style, data.Remark, data.SkipVerify, data.State, data.QrCode, data.User, data.Party, data.IsTemp, data.ExpiresIn, data.ChatExpiresIn, data.Unionid, data.Status, data.Id)
	return err
}

func (m *defaultUserServiceQrcodeModel) tableName() string {
	return m.table
}
