// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tbOperationLogFieldNames          = builder.RawFieldNames(&TbOperationLog{})
	tbOperationLogRows                = strings.Join(tbOperationLogFieldNames, ",")
	tbOperationLogRowsExpectAutoSet   = strings.Join(stringx.Remove(tbOperationLogFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	tbOperationLogRowsWithPlaceHolder = strings.Join(stringx.Remove(tbOperationLogFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	tbOperationLogModel interface {
		Insert(ctx context.Context, data *TbOperationLog) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*TbOperationLog, error)
		Update(ctx context.Context, data *TbOperationLog) error
		Delete(ctx context.Context, id int64) error
	}

	defaultTbOperationLogModel struct {
		conn  sqlx.SqlConn
		table string
	}

	TbOperationLog struct {
		Id         int64          `db:"id"`          // 主键 | 柴利瑶 | 2020-05-15
		RelatedId  int64          `db:"related_id"`  // 关联表的id |柴利瑶 | 2020-06-15
		AdminId    int64          `db:"admin_id"`    // 操作人id | 柴利瑶 | 2020-05-15
		Type       int64          `db:"type"`        // 操作类型 | 柴利瑶 | 2020-05-15
		LogType    int64          `db:"log_type"`    // 日志详情的类型 | 柴利瑶 | 2020-05-15
		LogDesc    sql.NullString `db:"log_desc"`    // 日志内容 | 柴利瑶 |2020-05-15
		UpdateTime time.Time      `db:"update_time"` // 更新时间
		CreateTime time.Time      `db:"create_time"` // 创建时间
	}
)

func newTbOperationLogModel(conn sqlx.SqlConn) *defaultTbOperationLogModel {
	return &defaultTbOperationLogModel{
		conn:  conn,
		table: "`tb_operation_log`",
	}
}

func (m *defaultTbOperationLogModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultTbOperationLogModel) FindOne(ctx context.Context, id int64) (*TbOperationLog, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tbOperationLogRows, m.table)
	var resp TbOperationLog
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTbOperationLogModel) Insert(ctx context.Context, data *TbOperationLog) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, tbOperationLogRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.RelatedId, data.AdminId, data.Type, data.LogType, data.LogDesc)
	return ret, err
}

func (m *defaultTbOperationLogModel) Update(ctx context.Context, data *TbOperationLog) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, tbOperationLogRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.RelatedId, data.AdminId, data.Type, data.LogType, data.LogDesc, data.Id)
	return err
}

func (m *defaultTbOperationLogModel) tableName() string {
	return m.table
}
