// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tbPrivateDomainUserFieldNames          = builder.RawFieldNames(&TbPrivateDomainUser{})
	tbPrivateDomainUserRows                = strings.Join(tbPrivateDomainUserFieldNames, ",")
	tbPrivateDomainUserRowsExpectAutoSet   = strings.Join(stringx.Remove(tbPrivateDomainUserFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	tbPrivateDomainUserRowsWithPlaceHolder = strings.Join(stringx.Remove(tbPrivateDomainUserFieldNames, "`external_userid`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	tbPrivateDomainUserModel interface {
		Insert(ctx context.Context, data *TbPrivateDomainUser) (sql.Result, error)
		FindOne(ctx context.Context, externalUserid string) (*TbPrivateDomainUser, error)
		Update(ctx context.Context, data *TbPrivateDomainUser) error
		Delete(ctx context.Context, externalUserid string) error
	}

	defaultTbPrivateDomainUserModel struct {
		conn  sqlx.SqlConn
		table string
	}

	TbPrivateDomainUser struct {
		From            int64     `db:"from"`              // 企微平台
		QywxUserId      string    `db:"qywx_user_id"`      // 外部联系人的userid
		ExternalUserid  string    `db:"external_userid"`   // 联系人的userid
		AddTime         time.Time `db:"add_time"`          // 添加时间
		ChatAgreeStatus int64     `db:"chat_agree_status"` // 会话存档状态 (0:不同意 / 1:同意)
		LastChatTime    time.Time `db:"last_chat_time"`    // 最近沟通时间
		BlacklistTime   time.Time `db:"blacklist_time"`    // 拉黑时间
		BlacklistType   string    `db:"blacklist_type"`    // 拉黑删除类型：external_user|staff
		Status          int64     `db:"status"`            // 拉黑删除类型：external_user|staff
	}
)

func newTbPrivateDomainUserModel(conn sqlx.SqlConn) *defaultTbPrivateDomainUserModel {
	return &defaultTbPrivateDomainUserModel{
		conn:  conn,
		table: "`tb_private_domain_user`",
	}
}

func (m *defaultTbPrivateDomainUserModel) Delete(ctx context.Context, externalUserid string) error {
	query := fmt.Sprintf("delete from %s where `external_userid` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, externalUserid)
	return err
}

func (m *defaultTbPrivateDomainUserModel) FindOne(ctx context.Context, externalUserid string) (*TbPrivateDomainUser, error) {
	query := fmt.Sprintf("select %s from %s where `external_userid` = ? limit 1", tbPrivateDomainUserRows, m.table)
	var resp TbPrivateDomainUser
	err := m.conn.QueryRowCtx(ctx, &resp, query, externalUserid)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTbPrivateDomainUserModel) Insert(ctx context.Context, data *TbPrivateDomainUser) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, tbPrivateDomainUserRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.From, data.QywxUserId, data.ExternalUserid, data.AddTime, data.ChatAgreeStatus, data.LastChatTime, data.BlacklistTime, data.BlacklistType, data.Status)
	return ret, err
}

func (m *defaultTbPrivateDomainUserModel) Update(ctx context.Context, data *TbPrivateDomainUser) error {
	query := fmt.Sprintf("update %s set %s where `external_userid` = ?", m.table, tbPrivateDomainUserRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.From, data.QywxUserId, data.AddTime, data.ChatAgreeStatus, data.LastChatTime, data.BlacklistTime, data.BlacklistType, data.Status, data.ExternalUserid)
	return err
}

func (m *defaultTbPrivateDomainUserModel) tableName() string {
	return m.table
}
