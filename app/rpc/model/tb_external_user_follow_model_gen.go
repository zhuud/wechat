// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tbExternalUserFollowFieldNames          = builder.RawFieldNames(&TbExternalUserFollow{})
	tbExternalUserFollowRows                = strings.Join(tbExternalUserFollowFieldNames, ",")
	tbExternalUserFollowRowsExpectAutoSet   = strings.Join(stringx.Remove(tbExternalUserFollowFieldNames, "`seq`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	tbExternalUserFollowRowsWithPlaceHolder = strings.Join(stringx.Remove(tbExternalUserFollowFieldNames, "`seq`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheTbExternalUserFollowSeqPrefix = "cache:tbExternalUserFollow:seq:"
)

type (
	tbExternalUserFollowModel interface {
		Insert(ctx context.Context, data *TbExternalUserFollow) (sql.Result, error)
		FindOne(ctx context.Context, seq int64) (*TbExternalUserFollow, error)
		Update(ctx context.Context, data *TbExternalUserFollow) error
		Delete(ctx context.Context, seq int64) error
	}

	defaultTbExternalUserFollowModel struct {
		sqlc.CachedConn
		table string
	}

	TbExternalUserFollow struct {
		Seq               int64     `db:"seq"`                 // 主键 | 2020-09-10
		ExternalUserid    string    `db:"external_userid"`     // 外部联系人的userid | 2020-09-10
		Unionid           string    `db:"unionid"`             // 外部联系人在微信开放平台的唯一身份标识（联系人类型是微信用户且企业绑定了微信开发者ID有此字段 第三方应用和代开发应用均不可获取 上游企业不可获取下游企业客户该字段） | 2020-09-10
		Userid            string    `db:"userid"`              // 联系人的userid | 2020-09-10
		Platform          string    `db:"platform"`            // 企微平台(多企微情况) | 2020-09-10
		OperUserid        string    `db:"oper_userid"`         // 发起添加的userid(成员主动添加为成员的userid 客户主动添加为客户的外部联系人userid 内部成员共享/管理员分配为对应的成员/管理员userid) | 2020-09-10
		AddWay            int64     `db:"add_way"`             // 添加外部联系人的方式(https://developer.work.weixin.qq.com/document/path/92114#%E6%9D%A5%E6%BA%90%E5%AE%9A%E4%B9%89) | 2020-09-10
		State             string    `db:"state"`               // 外部联系人添加渠道 | 2020-09-10
		StateChannel      string    `db:"state_channel"`       // 外部联系人添加渠道 | 2020-09-10
		StateChannelValue string    `db:"state_channel_value"` // 外部联系人添加渠道透传参数 | 2020-09-10
		Remark            string    `db:"remark"`              // 对外部联系人的备注 | 2020-09-10
		RemarkMobiles     string    `db:"remark_mobiles"`      // 备注的手机号码 | 2020-09-10
		Description       string    `db:"description"`         // 对外部联系人的描述 | 2020-09-10
		RemarkCorpName    string    `db:"remark_corp_name"`    // 对外部联系人备注的所属公司名称 | 2020-09-10
		RemarkPicMediaid  string    `db:"remark_pic_mediaid"`  // 对外部联系人备注的图片ID | 2020-09-10
		Status            int64     `db:"status"`              // 状态 (0:删除,1:正常) | 2020-09-10
		CreatedAt         time.Time `db:"created_at"`          // 创建时间 | 2020-09-10
		UpdatedAt         time.Time `db:"updated_at"`          // 更新时间 | 2020-09-10
		ChatAgreeStatus   uint64    `db:"chat_agree_status"`   // 会话存档状态 0不同意 1同意
		DeletedAt         time.Time `db:"deleted_at"`          // 删除时间 | 2020-09-10
	}
)

func newTbExternalUserFollowModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultTbExternalUserFollowModel {
	return &defaultTbExternalUserFollowModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`tb_external_user_follow`",
	}
}

func (m *defaultTbExternalUserFollowModel) Delete(ctx context.Context, seq int64) error {
	tbExternalUserFollowSeqKey := fmt.Sprintf("%s%v", cacheTbExternalUserFollowSeqPrefix, seq)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `seq` = ?", m.table)
		return conn.ExecCtx(ctx, query, seq)
	}, tbExternalUserFollowSeqKey)
	return err
}

func (m *defaultTbExternalUserFollowModel) FindOne(ctx context.Context, seq int64) (*TbExternalUserFollow, error) {
	tbExternalUserFollowSeqKey := fmt.Sprintf("%s%v", cacheTbExternalUserFollowSeqPrefix, seq)
	var resp TbExternalUserFollow
	err := m.QueryRowCtx(ctx, &resp, tbExternalUserFollowSeqKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `seq` = ? limit 1", tbExternalUserFollowRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, seq)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTbExternalUserFollowModel) Insert(ctx context.Context, data *TbExternalUserFollow) (sql.Result, error) {
	tbExternalUserFollowSeqKey := fmt.Sprintf("%s%v", cacheTbExternalUserFollowSeqPrefix, data.Seq)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, tbExternalUserFollowRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.ExternalUserid, data.Unionid, data.Userid, data.Platform, data.OperUserid, data.AddWay, data.State, data.StateChannel, data.StateChannelValue, data.Remark, data.RemarkMobiles, data.Description, data.RemarkCorpName, data.RemarkPicMediaid, data.Status, data.ChatAgreeStatus, data.DeletedAt)
	}, tbExternalUserFollowSeqKey)
	return ret, err
}

func (m *defaultTbExternalUserFollowModel) Update(ctx context.Context, data *TbExternalUserFollow) error {
	tbExternalUserFollowSeqKey := fmt.Sprintf("%s%v", cacheTbExternalUserFollowSeqPrefix, data.Seq)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `seq` = ?", m.table, tbExternalUserFollowRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.ExternalUserid, data.Unionid, data.Userid, data.Platform, data.OperUserid, data.AddWay, data.State, data.StateChannel, data.StateChannelValue, data.Remark, data.RemarkMobiles, data.Description, data.RemarkCorpName, data.RemarkPicMediaid, data.Status, data.ChatAgreeStatus, data.DeletedAt, data.Seq)
	}, tbExternalUserFollowSeqKey)
	return err
}

func (m *defaultTbExternalUserFollowModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheTbExternalUserFollowSeqPrefix, primary)
}

func (m *defaultTbExternalUserFollowModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `seq` = ? limit 1", tbExternalUserFollowRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultTbExternalUserFollowModel) tableName() string {
	return m.table
}
