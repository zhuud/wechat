// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tbUserOpenFieldNames          = builder.RawFieldNames(&TbUserOpen{})
	tbUserOpenRows                = strings.Join(tbUserOpenFieldNames, ",")
	tbUserOpenRowsExpectAutoSet   = strings.Join(stringx.Remove(tbUserOpenFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	tbUserOpenRowsWithPlaceHolder = strings.Join(stringx.Remove(tbUserOpenFieldNames, "`open_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	tbUserOpenModel interface {
		Insert(ctx context.Context, data *TbUserOpen) (sql.Result, error)
		FindOne(ctx context.Context, openId string) (*TbUserOpen, error)
		Update(ctx context.Context, data *TbUserOpen) error
		Delete(ctx context.Context, openId string) error
	}

	defaultTbUserOpenModel struct {
		conn  sqlx.SqlConn
		table string
	}

	TbUserOpen struct {
		OpenSite int64  `db:"open_site"` // 固定值3
		OpenId   string `db:"open_id"`   // 微信unionid
		Uid      int64  `db:"uid"`       // 业务uid
	}
)

func newTbUserOpenModel(conn sqlx.SqlConn) *defaultTbUserOpenModel {
	return &defaultTbUserOpenModel{
		conn:  conn,
		table: "`tb_user_open`",
	}
}

func (m *defaultTbUserOpenModel) Delete(ctx context.Context, openId string) error {
	query := fmt.Sprintf("delete from %s where `open_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, openId)
	return err
}

func (m *defaultTbUserOpenModel) FindOne(ctx context.Context, openId string) (*TbUserOpen, error) {
	query := fmt.Sprintf("select %s from %s where `open_id` = ? limit 1", tbUserOpenRows, m.table)
	var resp TbUserOpen
	err := m.conn.QueryRowCtx(ctx, &resp, query, openId)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTbUserOpenModel) Insert(ctx context.Context, data *TbUserOpen) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, tbUserOpenRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.OpenSite, data.OpenId, data.Uid)
	return ret, err
}

func (m *defaultTbUserOpenModel) Update(ctx context.Context, data *TbUserOpen) error {
	query := fmt.Sprintf("update %s set %s where `open_id` = ?", m.table, tbUserOpenRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.OpenSite, data.Uid, data.OpenId)
	return err
}

func (m *defaultTbUserOpenModel) tableName() string {
	return m.table
}
