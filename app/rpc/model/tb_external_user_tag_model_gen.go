// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tbExternalUserTagFieldNames          = builder.RawFieldNames(&TbExternalUserTag{})
	tbExternalUserTagRows                = strings.Join(tbExternalUserTagFieldNames, ",")
	tbExternalUserTagRowsExpectAutoSet   = strings.Join(stringx.Remove(tbExternalUserTagFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	tbExternalUserTagRowsWithPlaceHolder = strings.Join(stringx.Remove(tbExternalUserTagFieldNames, "`tag_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	tbExternalUserTagModel interface {
		Insert(ctx context.Context, data *TbExternalUserTag) (sql.Result, error)
		FindOne(ctx context.Context, tagId string) (*TbExternalUserTag, error)
		Update(ctx context.Context, data *TbExternalUserTag) error
		Delete(ctx context.Context, tagId string) error
	}

	defaultTbExternalUserTagModel struct {
		conn  sqlx.SqlConn
		table string
	}

	TbExternalUserTag struct {
		TagId     string    `db:"tag_id"`     // 标签id | 2020-09-10
		GroupId   string    `db:"group_id"`   // 标签组id | 2020-09-10
		GroupName string    `db:"group_name"` // 标签组名字 | 2020-09-10
		Name      string    `db:"name"`       // 标签名字 | 2020-09-10
		Weight    int64     `db:"weight"`     // 排序的次序值，order值大的排序靠前 微信为order关键字 | 2020-09-10
		Status    int64     `db:"status"`     // 状态 (0:删除 / 1:正常) | 2020-09-10
		CreatedAt time.Time `db:"created_at"` // 创建时间 | 2020-09-10
		UpdatedAt time.Time `db:"updated_at"` // 更新时间 | 2020-09-10
	}
)

func newTbExternalUserTagModel(conn sqlx.SqlConn) *defaultTbExternalUserTagModel {
	return &defaultTbExternalUserTagModel{
		conn:  conn,
		table: "`tb_external_user_tag`",
	}
}

func (m *defaultTbExternalUserTagModel) Delete(ctx context.Context, tagId string) error {
	query := fmt.Sprintf("delete from %s where `tag_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, tagId)
	return err
}

func (m *defaultTbExternalUserTagModel) FindOne(ctx context.Context, tagId string) (*TbExternalUserTag, error) {
	query := fmt.Sprintf("select %s from %s where `tag_id` = ? limit 1", tbExternalUserTagRows, m.table)
	var resp TbExternalUserTag
	err := m.conn.QueryRowCtx(ctx, &resp, query, tagId)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTbExternalUserTagModel) Insert(ctx context.Context, data *TbExternalUserTag) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, tbExternalUserTagRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.TagId, data.GroupId, data.GroupName, data.Name, data.Weight, data.Status)
	return ret, err
}

func (m *defaultTbExternalUserTagModel) Update(ctx context.Context, data *TbExternalUserTag) error {
	query := fmt.Sprintf("update %s set %s where `tag_id` = ?", m.table, tbExternalUserTagRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.GroupId, data.GroupName, data.Name, data.Weight, data.Status, data.TagId)
	return err
}

func (m *defaultTbExternalUserTagModel) tableName() string {
	return m.table
}
