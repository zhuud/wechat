// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: wechat.proto

package wechat

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	ExternalContactUser_GetExternalUserInfo_FullMethodName       = "/wechat.ExternalContactUser/GetExternalUserInfo"
	ExternalContactUser_GetExternalUserIdByUserId_FullMethodName = "/wechat.ExternalContactUser/GetExternalUserIdByUserId"
	ExternalContactUser_UpdateExternalUserRemark_FullMethodName  = "/wechat.ExternalContactUser/UpdateExternalUserRemark"
)

// ExternalContactUserClient is the client API for ExternalContactUser service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExternalContactUserClient interface {
	GetExternalUserInfo(ctx context.Context, in *ExternalUserInfoReq, opts ...grpc.CallOption) (*ExternalUserInfoResp, error)
	GetExternalUserIdByUserId(ctx context.Context, in *ExternalUserIdReq, opts ...grpc.CallOption) (*ExternalUserIdResp, error)
	UpdateExternalUserRemark(ctx context.Context, in *UpdateExternalUserRemarkReq, opts ...grpc.CallOption) (*ErrorResp, error)
}

type externalContactUserClient struct {
	cc grpc.ClientConnInterface
}

func NewExternalContactUserClient(cc grpc.ClientConnInterface) ExternalContactUserClient {
	return &externalContactUserClient{cc}
}

func (c *externalContactUserClient) GetExternalUserInfo(ctx context.Context, in *ExternalUserInfoReq, opts ...grpc.CallOption) (*ExternalUserInfoResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExternalUserInfoResp)
	err := c.cc.Invoke(ctx, ExternalContactUser_GetExternalUserInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalContactUserClient) GetExternalUserIdByUserId(ctx context.Context, in *ExternalUserIdReq, opts ...grpc.CallOption) (*ExternalUserIdResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExternalUserIdResp)
	err := c.cc.Invoke(ctx, ExternalContactUser_GetExternalUserIdByUserId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalContactUserClient) UpdateExternalUserRemark(ctx context.Context, in *UpdateExternalUserRemarkReq, opts ...grpc.CallOption) (*ErrorResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ErrorResp)
	err := c.cc.Invoke(ctx, ExternalContactUser_UpdateExternalUserRemark_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExternalContactUserServer is the server API for ExternalContactUser service.
// All implementations must embed UnimplementedExternalContactUserServer
// for forward compatibility
type ExternalContactUserServer interface {
	GetExternalUserInfo(context.Context, *ExternalUserInfoReq) (*ExternalUserInfoResp, error)
	GetExternalUserIdByUserId(context.Context, *ExternalUserIdReq) (*ExternalUserIdResp, error)
	UpdateExternalUserRemark(context.Context, *UpdateExternalUserRemarkReq) (*ErrorResp, error)
	mustEmbedUnimplementedExternalContactUserServer()
}

// UnimplementedExternalContactUserServer must be embedded to have forward compatible implementations.
type UnimplementedExternalContactUserServer struct {
}

func (UnimplementedExternalContactUserServer) GetExternalUserInfo(context.Context, *ExternalUserInfoReq) (*ExternalUserInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExternalUserInfo not implemented")
}
func (UnimplementedExternalContactUserServer) GetExternalUserIdByUserId(context.Context, *ExternalUserIdReq) (*ExternalUserIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExternalUserIdByUserId not implemented")
}
func (UnimplementedExternalContactUserServer) UpdateExternalUserRemark(context.Context, *UpdateExternalUserRemarkReq) (*ErrorResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateExternalUserRemark not implemented")
}
func (UnimplementedExternalContactUserServer) mustEmbedUnimplementedExternalContactUserServer() {}

// UnsafeExternalContactUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExternalContactUserServer will
// result in compilation errors.
type UnsafeExternalContactUserServer interface {
	mustEmbedUnimplementedExternalContactUserServer()
}

func RegisterExternalContactUserServer(s grpc.ServiceRegistrar, srv ExternalContactUserServer) {
	s.RegisterService(&ExternalContactUser_ServiceDesc, srv)
}

func _ExternalContactUser_GetExternalUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExternalUserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalContactUserServer).GetExternalUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExternalContactUser_GetExternalUserInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalContactUserServer).GetExternalUserInfo(ctx, req.(*ExternalUserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalContactUser_GetExternalUserIdByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExternalUserIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalContactUserServer).GetExternalUserIdByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExternalContactUser_GetExternalUserIdByUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalContactUserServer).GetExternalUserIdByUserId(ctx, req.(*ExternalUserIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalContactUser_UpdateExternalUserRemark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateExternalUserRemarkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalContactUserServer).UpdateExternalUserRemark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExternalContactUser_UpdateExternalUserRemark_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalContactUserServer).UpdateExternalUserRemark(ctx, req.(*UpdateExternalUserRemarkReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ExternalContactUser_ServiceDesc is the grpc.ServiceDesc for ExternalContactUser service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExternalContactUser_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wechat.ExternalContactUser",
	HandlerType: (*ExternalContactUserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetExternalUserInfo",
			Handler:    _ExternalContactUser_GetExternalUserInfo_Handler,
		},
		{
			MethodName: "GetExternalUserIdByUserId",
			Handler:    _ExternalContactUser_GetExternalUserIdByUserId_Handler,
		},
		{
			MethodName: "UpdateExternalUserRemark",
			Handler:    _ExternalContactUser_UpdateExternalUserRemark_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "wechat.proto",
}

const (
	ExternalContactGroupChat_GetExternalGroupChatInfo_FullMethodName = "/wechat.ExternalContactGroupChat/GetExternalGroupChatInfo"
	ExternalContactGroupChat_GetExternalGroupChatList_FullMethodName = "/wechat.ExternalContactGroupChat/GetExternalGroupChatList"
)

// ExternalContactGroupChatClient is the client API for ExternalContactGroupChat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExternalContactGroupChatClient interface {
	GetExternalGroupChatInfo(ctx context.Context, in *ExternalGroupChatInfoReq, opts ...grpc.CallOption) (*ErrorResp, error)
	GetExternalGroupChatList(ctx context.Context, in *ExternalGroupChatListReq, opts ...grpc.CallOption) (*ErrorResp, error)
}

type externalContactGroupChatClient struct {
	cc grpc.ClientConnInterface
}

func NewExternalContactGroupChatClient(cc grpc.ClientConnInterface) ExternalContactGroupChatClient {
	return &externalContactGroupChatClient{cc}
}

func (c *externalContactGroupChatClient) GetExternalGroupChatInfo(ctx context.Context, in *ExternalGroupChatInfoReq, opts ...grpc.CallOption) (*ErrorResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ErrorResp)
	err := c.cc.Invoke(ctx, ExternalContactGroupChat_GetExternalGroupChatInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalContactGroupChatClient) GetExternalGroupChatList(ctx context.Context, in *ExternalGroupChatListReq, opts ...grpc.CallOption) (*ErrorResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ErrorResp)
	err := c.cc.Invoke(ctx, ExternalContactGroupChat_GetExternalGroupChatList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExternalContactGroupChatServer is the server API for ExternalContactGroupChat service.
// All implementations must embed UnimplementedExternalContactGroupChatServer
// for forward compatibility
type ExternalContactGroupChatServer interface {
	GetExternalGroupChatInfo(context.Context, *ExternalGroupChatInfoReq) (*ErrorResp, error)
	GetExternalGroupChatList(context.Context, *ExternalGroupChatListReq) (*ErrorResp, error)
	mustEmbedUnimplementedExternalContactGroupChatServer()
}

// UnimplementedExternalContactGroupChatServer must be embedded to have forward compatible implementations.
type UnimplementedExternalContactGroupChatServer struct {
}

func (UnimplementedExternalContactGroupChatServer) GetExternalGroupChatInfo(context.Context, *ExternalGroupChatInfoReq) (*ErrorResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExternalGroupChatInfo not implemented")
}
func (UnimplementedExternalContactGroupChatServer) GetExternalGroupChatList(context.Context, *ExternalGroupChatListReq) (*ErrorResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExternalGroupChatList not implemented")
}
func (UnimplementedExternalContactGroupChatServer) mustEmbedUnimplementedExternalContactGroupChatServer() {
}

// UnsafeExternalContactGroupChatServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExternalContactGroupChatServer will
// result in compilation errors.
type UnsafeExternalContactGroupChatServer interface {
	mustEmbedUnimplementedExternalContactGroupChatServer()
}

func RegisterExternalContactGroupChatServer(s grpc.ServiceRegistrar, srv ExternalContactGroupChatServer) {
	s.RegisterService(&ExternalContactGroupChat_ServiceDesc, srv)
}

func _ExternalContactGroupChat_GetExternalGroupChatInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExternalGroupChatInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalContactGroupChatServer).GetExternalGroupChatInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExternalContactGroupChat_GetExternalGroupChatInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalContactGroupChatServer).GetExternalGroupChatInfo(ctx, req.(*ExternalGroupChatInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalContactGroupChat_GetExternalGroupChatList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExternalGroupChatListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalContactGroupChatServer).GetExternalGroupChatList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExternalContactGroupChat_GetExternalGroupChatList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalContactGroupChatServer).GetExternalGroupChatList(ctx, req.(*ExternalGroupChatListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ExternalContactGroupChat_ServiceDesc is the grpc.ServiceDesc for ExternalContactGroupChat service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExternalContactGroupChat_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wechat.ExternalContactGroupChat",
	HandlerType: (*ExternalContactGroupChatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetExternalGroupChatInfo",
			Handler:    _ExternalContactGroupChat_GetExternalGroupChatInfo_Handler,
		},
		{
			MethodName: "GetExternalGroupChatList",
			Handler:    _ExternalContactGroupChat_GetExternalGroupChatList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "wechat.proto",
}

const (
	ExternalContactWay_CreateExternalContactWay_FullMethodName  = "/wechat.ExternalContactWay/CreateExternalContactWay"
	ExternalContactWay_UpdateExternalContactWay_FullMethodName  = "/wechat.ExternalContactWay/UpdateExternalContactWay"
	ExternalContactWay_DeleteExternalContactWay_FullMethodName  = "/wechat.ExternalContactWay/DeleteExternalContactWay"
	ExternalContactWay_GetExternalContactWayInfo_FullMethodName = "/wechat.ExternalContactWay/GetExternalContactWayInfo"
	ExternalContactWay_GetExternalContactWayList_FullMethodName = "/wechat.ExternalContactWay/GetExternalContactWayList"
)

// ExternalContactWayClient is the client API for ExternalContactWay service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExternalContactWayClient interface {
	CreateExternalContactWay(ctx context.Context, in *ExternalContactWayData, opts ...grpc.CallOption) (*SaveExternalContactWayResp, error)
	UpdateExternalContactWay(ctx context.Context, in *ExternalContactWayData, opts ...grpc.CallOption) (*SaveExternalContactWayResp, error)
	DeleteExternalContactWay(ctx context.Context, in *ExternalContactWayReq, opts ...grpc.CallOption) (*ErrorResp, error)
	GetExternalContactWayInfo(ctx context.Context, in *ExternalContactWayReq, opts ...grpc.CallOption) (*ExternalContactWayInfoResp, error)
	GetExternalContactWayList(ctx context.Context, in *ExternalContactWayListReq, opts ...grpc.CallOption) (*ExternalContactWayListResp, error)
}

type externalContactWayClient struct {
	cc grpc.ClientConnInterface
}

func NewExternalContactWayClient(cc grpc.ClientConnInterface) ExternalContactWayClient {
	return &externalContactWayClient{cc}
}

func (c *externalContactWayClient) CreateExternalContactWay(ctx context.Context, in *ExternalContactWayData, opts ...grpc.CallOption) (*SaveExternalContactWayResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SaveExternalContactWayResp)
	err := c.cc.Invoke(ctx, ExternalContactWay_CreateExternalContactWay_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalContactWayClient) UpdateExternalContactWay(ctx context.Context, in *ExternalContactWayData, opts ...grpc.CallOption) (*SaveExternalContactWayResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SaveExternalContactWayResp)
	err := c.cc.Invoke(ctx, ExternalContactWay_UpdateExternalContactWay_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalContactWayClient) DeleteExternalContactWay(ctx context.Context, in *ExternalContactWayReq, opts ...grpc.CallOption) (*ErrorResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ErrorResp)
	err := c.cc.Invoke(ctx, ExternalContactWay_DeleteExternalContactWay_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalContactWayClient) GetExternalContactWayInfo(ctx context.Context, in *ExternalContactWayReq, opts ...grpc.CallOption) (*ExternalContactWayInfoResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExternalContactWayInfoResp)
	err := c.cc.Invoke(ctx, ExternalContactWay_GetExternalContactWayInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalContactWayClient) GetExternalContactWayList(ctx context.Context, in *ExternalContactWayListReq, opts ...grpc.CallOption) (*ExternalContactWayListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExternalContactWayListResp)
	err := c.cc.Invoke(ctx, ExternalContactWay_GetExternalContactWayList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExternalContactWayServer is the server API for ExternalContactWay service.
// All implementations must embed UnimplementedExternalContactWayServer
// for forward compatibility
type ExternalContactWayServer interface {
	CreateExternalContactWay(context.Context, *ExternalContactWayData) (*SaveExternalContactWayResp, error)
	UpdateExternalContactWay(context.Context, *ExternalContactWayData) (*SaveExternalContactWayResp, error)
	DeleteExternalContactWay(context.Context, *ExternalContactWayReq) (*ErrorResp, error)
	GetExternalContactWayInfo(context.Context, *ExternalContactWayReq) (*ExternalContactWayInfoResp, error)
	GetExternalContactWayList(context.Context, *ExternalContactWayListReq) (*ExternalContactWayListResp, error)
	mustEmbedUnimplementedExternalContactWayServer()
}

// UnimplementedExternalContactWayServer must be embedded to have forward compatible implementations.
type UnimplementedExternalContactWayServer struct {
}

func (UnimplementedExternalContactWayServer) CreateExternalContactWay(context.Context, *ExternalContactWayData) (*SaveExternalContactWayResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateExternalContactWay not implemented")
}
func (UnimplementedExternalContactWayServer) UpdateExternalContactWay(context.Context, *ExternalContactWayData) (*SaveExternalContactWayResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateExternalContactWay not implemented")
}
func (UnimplementedExternalContactWayServer) DeleteExternalContactWay(context.Context, *ExternalContactWayReq) (*ErrorResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteExternalContactWay not implemented")
}
func (UnimplementedExternalContactWayServer) GetExternalContactWayInfo(context.Context, *ExternalContactWayReq) (*ExternalContactWayInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExternalContactWayInfo not implemented")
}
func (UnimplementedExternalContactWayServer) GetExternalContactWayList(context.Context, *ExternalContactWayListReq) (*ExternalContactWayListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExternalContactWayList not implemented")
}
func (UnimplementedExternalContactWayServer) mustEmbedUnimplementedExternalContactWayServer() {}

// UnsafeExternalContactWayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExternalContactWayServer will
// result in compilation errors.
type UnsafeExternalContactWayServer interface {
	mustEmbedUnimplementedExternalContactWayServer()
}

func RegisterExternalContactWayServer(s grpc.ServiceRegistrar, srv ExternalContactWayServer) {
	s.RegisterService(&ExternalContactWay_ServiceDesc, srv)
}

func _ExternalContactWay_CreateExternalContactWay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExternalContactWayData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalContactWayServer).CreateExternalContactWay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExternalContactWay_CreateExternalContactWay_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalContactWayServer).CreateExternalContactWay(ctx, req.(*ExternalContactWayData))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalContactWay_UpdateExternalContactWay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExternalContactWayData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalContactWayServer).UpdateExternalContactWay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExternalContactWay_UpdateExternalContactWay_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalContactWayServer).UpdateExternalContactWay(ctx, req.(*ExternalContactWayData))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalContactWay_DeleteExternalContactWay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExternalContactWayReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalContactWayServer).DeleteExternalContactWay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExternalContactWay_DeleteExternalContactWay_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalContactWayServer).DeleteExternalContactWay(ctx, req.(*ExternalContactWayReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalContactWay_GetExternalContactWayInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExternalContactWayReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalContactWayServer).GetExternalContactWayInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExternalContactWay_GetExternalContactWayInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalContactWayServer).GetExternalContactWayInfo(ctx, req.(*ExternalContactWayReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalContactWay_GetExternalContactWayList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExternalContactWayListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalContactWayServer).GetExternalContactWayList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExternalContactWay_GetExternalContactWayList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalContactWayServer).GetExternalContactWayList(ctx, req.(*ExternalContactWayListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ExternalContactWay_ServiceDesc is the grpc.ServiceDesc for ExternalContactWay service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExternalContactWay_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wechat.ExternalContactWay",
	HandlerType: (*ExternalContactWayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateExternalContactWay",
			Handler:    _ExternalContactWay_CreateExternalContactWay_Handler,
		},
		{
			MethodName: "UpdateExternalContactWay",
			Handler:    _ExternalContactWay_UpdateExternalContactWay_Handler,
		},
		{
			MethodName: "DeleteExternalContactWay",
			Handler:    _ExternalContactWay_DeleteExternalContactWay_Handler,
		},
		{
			MethodName: "GetExternalContactWayInfo",
			Handler:    _ExternalContactWay_GetExternalContactWayInfo_Handler,
		},
		{
			MethodName: "GetExternalContactWayList",
			Handler:    _ExternalContactWay_GetExternalContactWayList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "wechat.proto",
}
